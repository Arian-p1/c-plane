// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.920
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "fmt"

func FilesPage(data FilesPageData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"space-y-6\"><!-- Page Header --><div class=\"flex justify-between items-center\"><h1 class=\"text-2xl font-bold text-gray-800 dark:text-gray-700\">File Management</h1><button onclick=\"showUploadModal()\" class=\"btn btn-primary\"><i class=\"fas fa-upload mr-2\"></i> Upload Files</button></div><!-- Upload Area --><div class=\"card p-6\"><div id=\"upload-area\" class=\"border-2 border-dashed border-gray-300 dark:border-gray-200 rounded-lg p-8 text-center hover:border-accent transition-colors cursor-pointer\"><i class=\"fas fa-cloud-upload-alt text-4xl text-gray-400 dark:text-gray-500 mb-4\"></i><p class=\"text-lg text-gray-600 dark:text-gray-600 mb-2\">Drag and drop files here</p><p class=\"text-sm text-gray-500 dark:text-gray-500 mb-4\">or click to select files</p><button class=\"btn btn-secondary\"><i class=\"fas fa-folder-open mr-2\"></i> Browse Files</button> <input type=\"file\" id=\"file-input\" multiple class=\"hidden\" accept=\".zip,.tar,.gz,.xml,.json,.txt,.cfg,.conf\"></div></div><!-- File Filters --><div class=\"card p-4\"><div class=\"flex flex-wrap items-center gap-4\"><div class=\"flex items-center space-x-2\"><label class=\"text-sm text-gray-600 dark:text-gray-500\">Filter by type:</label> <select id=\"file-type-filter\" class=\"form-select\"><option value=\"\">All Types</option> <option value=\"firmware\">Firmware</option> <option value=\"config\">Configuration</option> <option value=\"backup\">Backup</option> <option value=\"script\">Script</option> <option value=\"other\">Other</option></select></div><div class=\"flex items-center space-x-2\"><label class=\"text-sm text-gray-600 dark:text-gray-500\">Search:</label> <input type=\"text\" id=\"file-search\" placeholder=\"Search files...\" class=\"form-input w-64\"></div><div class=\"flex items-center space-x-2\"><span class=\"text-sm text-gray-600 dark:text-gray-500\">Total: <span id=\"total-files\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%d", len(data.Files)))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/templates/files.templ`, Line: 49, Col: 73}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</span> files (<span id=\"total-size\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(formatBytes(data.TotalSize))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/templates/files.templ`, Line: 50, Col: 59}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</span>)</span></div></div></div><!-- Files List --><div class=\"card\"><div class=\"p-4 border-b border-gray-200 dark:border-gray-200\"><h2 class=\"text-lg font-semibold text-gray-800 dark:text-gray-700\">Files</h2></div><div class=\"overflow-x-auto\"><table class=\"w-full\"><thead class=\"bg-gray-50 dark:bg-gray-50\"><tr><th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-500 uppercase tracking-wider\"><input type=\"checkbox\" id=\"select-all\" class=\"rounded\"></th><th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-500 uppercase tracking-wider\">Name</th><th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-500 uppercase tracking-wider\">Type</th><th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-500 uppercase tracking-wider\">Size</th><th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-500 uppercase tracking-wider\">Uploaded</th><th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-500 uppercase tracking-wider\">Actions</th></tr></thead> <tbody class=\"divide-y divide-gray-200 dark:divide-gray-200\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if len(data.Files) > 0 {
				for _, file := range data.Files {
					templ_7745c5c3_Err = FileRow(file).Render(ctx, templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				}
			} else {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<tr><td colspan=\"6\" class=\"px-6 py-12 text-center text-gray-500 dark:text-gray-500\"><i class=\"fas fa-folder-open text-4xl mb-4\"></i><p class=\"text-lg\">No files uploaded yet</p><p class=\"text-sm\">Upload some files to get started</p></td></tr>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</tbody></table></div></div><!-- Bulk Actions --><div id=\"bulk-actions\" class=\"hidden card p-4\"><div class=\"flex items-center justify-between\"><span class=\"text-sm text-gray-600 dark:text-gray-500\"><span id=\"selected-count\">0</span> files selected</span><div class=\"flex space-x-2\"><button onclick=\"downloadSelected()\" class=\"btn btn-secondary\"><i class=\"fas fa-download mr-2\"></i> Download</button> <button onclick=\"deleteSelected()\" class=\"btn btn-danger\"><i class=\"fas fa-trash mr-2\"></i> Delete</button></div></div></div></div><!-- Upload Modal --> <div id=\"upload-modal\" class=\"hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\"><div class=\"bg-white dark:bg-white rounded-lg p-6 max-w-md w-full\"><h3 class=\"text-lg font-semibold mb-4 text-gray-800 dark:text-gray-700\">Upload Files</h3><div class=\"space-y-4\"><div><label class=\"block text-sm font-medium text-gray-700 dark:text-gray-700 mb-2\">File Type</label> <select id=\"upload-type\" class=\"form-select w-full\"><option value=\"firmware\">Firmware</option> <option value=\"config\">Configuration</option> <option value=\"backup\">Backup</option> <option value=\"script\">Script</option> <option value=\"other\">Other</option></select></div><div><label class=\"block text-sm font-medium text-gray-700 dark:text-gray-700 mb-2\">Description (optional)</label> <textarea id=\"upload-description\" class=\"form-textarea w-full\" rows=\"3\" placeholder=\"Enter file description...\"></textarea></div><div id=\"upload-progress\" class=\"hidden\"><div class=\"flex justify-between text-sm text-gray-600 dark:text-gray-500 mb-1\"><span>Uploading...</span> <span id=\"upload-percent\">0%</span></div><div class=\"w-full bg-gray-200 dark:bg-gray-100 rounded-full h-2\"><div id=\"upload-bar\" class=\"bg-accent h-2 rounded-full transition-all duration-300\" style=\"width: 0%\"></div></div></div><div class=\"flex space-x-3\"><button onclick=\"startUpload()\" class=\"btn btn-primary flex-1\"><i class=\"fas fa-upload mr-2\"></i> Start Upload</button> <button onclick=\"closeUploadModal()\" class=\"btn btn-secondary\">Cancel</button></div></div></div></div><script>\n\t\t\tlet selectedFiles = [];\n\t\t\tlet uploadQueue = [];\n\n\t\t\t// File upload handling\n\t\t\tdocument.getElementById('upload-area').addEventListener('click', () => {\n\t\t\t\tdocument.getElementById('file-input').click();\n\t\t\t});\n\n\t\t\tdocument.getElementById('upload-area').addEventListener('dragover', (e) => {\n\t\t\t\te.preventDefault();\n\t\t\t\te.currentTarget.classList.add('border-accent');\n\t\t\t});\n\n\t\t\tdocument.getElementById('upload-area').addEventListener('dragleave', (e) => {\n\t\t\t\te.preventDefault();\n\t\t\t\te.currentTarget.classList.remove('border-accent');\n\t\t\t});\n\n\t\t\tdocument.getElementById('upload-area').addEventListener('drop', (e) => {\n\t\t\t\te.preventDefault();\n\t\t\t\te.currentTarget.classList.remove('border-accent');\n\t\t\t\thandleFiles(e.dataTransfer.files);\n\t\t\t});\n\n\t\t\tdocument.getElementById('file-input').addEventListener('change', (e) => {\n\t\t\t\thandleFiles(e.target.files);\n\t\t\t});\n\n\t\t\tfunction handleFiles(files) {\n\t\t\t\tuploadQueue = Array.from(files);\n\t\t\t\tif (uploadQueue.length > 0) {\n\t\t\t\t\tshowUploadModal();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction showUploadModal() {\n\t\t\t\tdocument.getElementById('upload-modal').classList.remove('hidden');\n\t\t\t}\n\n\t\t\tfunction closeUploadModal() {\n\t\t\t\tdocument.getElementById('upload-modal').classList.add('hidden');\n\t\t\t\tdocument.getElementById('upload-progress').classList.add('hidden');\n\t\t\t\tuploadQueue = [];\n\t\t\t}\n\n\t\t\tfunction startUpload() {\n\t\t\t\tif (uploadQueue.length === 0) return;\n\n\t\t\t\tconst type = document.getElementById('upload-type').value;\n\t\t\t\tconst description = document.getElementById('upload-description').value;\n\n\t\t\t\tdocument.getElementById('upload-progress').classList.remove('hidden');\n\n\t\t\t\tuploadFiles(uploadQueue, type, description);\n\t\t\t}\n\n\t\t\tfunction uploadFiles(files, type, description) {\n\t\t\t\tconst formData = new FormData();\n\n\t\t\t\tfor (let file of files) {\n\t\t\t\t\tformData.append('files', file);\n\t\t\t\t}\n\t\t\t\tformData.append('type', type);\n\t\t\t\tformData.append('description', description);\n\n\t\t\t\tconst xhr = new XMLHttpRequest();\n\n\t\t\t\txhr.upload.addEventListener('progress', (e) => {\n\t\t\t\t\tif (e.lengthComputable) {\n\t\t\t\t\t\tconst percent = Math.round((e.loaded / e.total) * 100);\n\t\t\t\t\t\tdocument.getElementById('upload-percent').textContent = percent + '%';\n\t\t\t\t\t\tdocument.getElementById('upload-bar').style.width = percent + '%';\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\txhr.addEventListener('load', () => {\n\t\t\t\t\tif (xhr.status === 200) {\n\t\t\t\t\t\tshowNotification('success', 'Files uploaded successfully');\n\t\t\t\t\t\tcloseUploadModal();\n\t\t\t\t\t\tlocation.reload();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tshowNotification('error', 'Upload failed');\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\txhr.addEventListener('error', () => {\n\t\t\t\t\tshowNotification('error', 'Upload failed');\n\t\t\t\t});\n\n\t\t\t\txhr.open('POST', '/api/files/upload');\n\t\t\t\txhr.send(formData);\n\t\t\t}\n\n\t\t\t// File selection\n\t\t\tfunction toggleFileSelection(fileId, checkbox) {\n\t\t\t\tif (checkbox.checked) {\n\t\t\t\t\tselectedFiles.push(fileId);\n\t\t\t\t} else {\n\t\t\t\t\tselectedFiles = selectedFiles.filter(id => id !== fileId);\n\t\t\t\t}\n\t\t\t\tupdateBulkActions();\n\t\t\t}\n\n\t\t\tfunction updateBulkActions() {\n\t\t\t\tconst bulkActions = document.getElementById('bulk-actions');\n\t\t\t\tconst selectedCount = document.getElementById('selected-count');\n\n\t\t\t\tif (selectedFiles.length > 0) {\n\t\t\t\t\tbulkActions.classList.remove('hidden');\n\t\t\t\t\tselectedCount.textContent = selectedFiles.length;\n\t\t\t\t} else {\n\t\t\t\t\tbulkActions.classList.add('hidden');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// File actions\n\t\t\tfunction downloadFile(fileId) {\n\t\t\t\twindow.open('/api/files/' + fileId + '/download', '_blank');\n\t\t\t}\n\n\t\t\tfunction deleteFile(fileId) {\n\t\t\t\tif (confirm('Are you sure you want to delete this file?')) {\n\t\t\t\t\tfetch('/api/files/' + fileId, { method: 'DELETE' })\n\t\t\t\t\t\t.then(res => res.json())\n\t\t\t\t\t\t.then(data => {\n\t\t\t\t\t\t\tif (data.success) {\n\t\t\t\t\t\t\t\tshowNotification('success', 'File deleted successfully');\n\t\t\t\t\t\t\t\tlocation.reload();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tshowNotification('error', data.error || 'Failed to delete file');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction downloadSelected() {\n\t\t\t\tif (selectedFiles.length === 0) return;\n\n\t\t\t\tconst form = document.createElement('form');\n\t\t\t\tform.method = 'POST';\n\t\t\t\tform.action = '/api/files/download-bulk';\n\n\t\t\t\tselectedFiles.forEach(fileId => {\n\t\t\t\t\tconst input = document.createElement('input');\n\t\t\t\t\tinput.type = 'hidden';\n\t\t\t\t\tinput.name = 'fileIds';\n\t\t\t\t\tinput.value = fileId;\n\t\t\t\t\tform.appendChild(input);\n\t\t\t\t});\n\n\t\t\t\tdocument.body.appendChild(form);\n\t\t\t\tform.submit();\n\t\t\t\tdocument.body.removeChild(form);\n\t\t\t}\n\n\t\t\tfunction deleteSelected() {\n\t\t\t\tif (selectedFiles.length === 0) return;\n\n\t\t\t\tif (confirm(`Are you sure you want to delete ${selectedFiles.length} files?`)) {\n\t\t\t\t\tPromise.all(selectedFiles.map(fileId =>\n\t\t\t\t\t\tfetch('/api/files/' + fileId, { method: 'DELETE' })\n\t\t\t\t\t)).then(() => {\n\t\t\t\t\t\tshowNotification('success', 'Files deleted successfully');\n\t\t\t\t\t\tlocation.reload();\n\t\t\t\t\t}).catch(() => {\n\t\t\t\t\t\tshowNotification('error', 'Failed to delete some files');\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// File filtering\n\t\t\tdocument.getElementById('file-type-filter').addEventListener('change', filterFiles);\n\t\t\tdocument.getElementById('file-search').addEventListener('input', filterFiles);\n\n\t\t\tfunction filterFiles() {\n\t\t\t\tconst typeFilter = document.getElementById('file-type-filter').value;\n\t\t\t\tconst searchFilter = document.getElementById('file-search').value.toLowerCase();\n\t\t\t\tconst rows = document.querySelectorAll('tbody tr[data-file-id]');\n\n\t\t\t\tlet visibleCount = 0;\n\t\t\t\trows.forEach(row => {\n\t\t\t\t\tconst type = row.dataset.fileType;\n\t\t\t\t\tconst name = row.dataset.fileName.toLowerCase();\n\n\t\t\t\t\tconst typeMatch = !typeFilter || type === typeFilter;\n\t\t\t\t\tconst nameMatch = !searchFilter || name.includes(searchFilter);\n\n\t\t\t\t\tif (typeMatch && nameMatch) {\n\t\t\t\t\t\trow.style.display = '';\n\t\t\t\t\t\tvisibleCount++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\trow.style.display = 'none';\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tdocument.getElementById('total-files').textContent = visibleCount;\n\t\t\t}\n\n\t\t\t// Select all checkbox\n\t\t\tdocument.getElementById('select-all').addEventListener('change', function() {\n\t\t\t\tconst checkboxes = document.querySelectorAll('tbody input[type=\"checkbox\"]');\n\t\t\t\tcheckboxes.forEach(checkbox => {\n\t\t\t\t\tif (this.checked) {\n\t\t\t\t\t\tcheckbox.checked = true;\n\t\t\t\t\t\ttoggleFileSelection(checkbox.dataset.fileId, checkbox);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcheckbox.checked = false;\n\t\t\t\t\t\tselectedFiles = [];\n\t\t\t\t\t\tupdateBulkActions();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tfunction showNotification(type, message) {\n\t\t\t\t// Implement notification display\n\t\t\t\talert(`${type}: ${message}`);\n\t\t\t}\n\t\t</script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = Page(data.Title, data.Theme, data.CurrentPath).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func FileRow(file FileInfo) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var5 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var5 == nil {
			templ_7745c5c3_Var5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<tr class=\"table-row hover:bg-gray-50 dark:hover:bg-gray-100\" data-file-id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var6 string
		templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(file.ID)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/templates/files.templ`, Line: 372, Col: 85}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "\" data-file-type=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var7 string
		templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(file.Type)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/templates/files.templ`, Line: 372, Col: 114}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "\" data-file-name=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var8 string
		templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(file.Name)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/templates/files.templ`, Line: 372, Col: 143}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "\"><td class=\"px-6 py-4 whitespace-nowrap\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.RenderScriptItems(ctx, templ_7745c5c3_Buffer, templ.JSFuncCall("toggleFileSelection", file.ID, "this"))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "<input type=\"checkbox\" class=\"rounded\" data-file-id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var9 string
		templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(file.ID)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/templates/files.templ`, Line: 374, Col: 64}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "\" onchange=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var10 templ.ComponentScript = templ.JSFuncCall("toggleFileSelection", file.ID, "this")
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var10.Call)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "\"></td><td class=\"px-6 py-4 whitespace-nowrap\"><div class=\"flex items-center\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var11 = []any{"fas mr-3 " + getFileIcon(file.Type)}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var11...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "<i class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var12 string
		templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var11).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/templates/files.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "\"></i><div><div class=\"text-sm font-medium text-gray-800 dark:text-gray-700\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var13 string
		templ_7745c5c3_Var13, templ_7745c5c3_Err = templ.JoinStringErrs(file.Name)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/templates/files.templ`, Line: 380, Col: 82}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var13))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if file.Description != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "<div class=\"text-sm text-gray-500 dark:text-gray-500\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var14 string
			templ_7745c5c3_Var14, templ_7745c5c3_Err = templ.JoinStringErrs(file.Description)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/templates/files.templ`, Line: 382, Col: 78}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var14))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "</div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "</div></div></td><td class=\"px-6 py-4 whitespace-nowrap\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var15 = []any{"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium " + getTypeClass(file.Type)}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var15...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "<span class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var16 string
		templ_7745c5c3_Var16, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var15).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/templates/files.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var16))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var17 string
		templ_7745c5c3_Var17, templ_7745c5c3_Err = templ.JoinStringErrs(file.Type)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/templates/files.templ`, Line: 389, Col: 15}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var17))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, "</span></td><td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-800 dark:text-gray-700\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var18 string
		templ_7745c5c3_Var18, templ_7745c5c3_Err = templ.JoinStringErrs(formatBytes(file.Size))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/templates/files.templ`, Line: 393, Col: 27}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var18))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, "</td><td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-500\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var19 string
		templ_7745c5c3_Var19, templ_7745c5c3_Err = templ.JoinStringErrs(timeAgo(file.UploadedAt))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/web/templates/files.templ`, Line: 396, Col: 29}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var19))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, "</td><td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium\"><div class=\"flex space-x-2\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.RenderScriptItems(ctx, templ_7745c5c3_Buffer, templ.JSFuncCall("downloadFile", file.ID))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, "<button onclick=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var20 templ.ComponentScript = templ.JSFuncCall("downloadFile", file.ID)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var20.Call)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 25, "\" class=\"text-accent hover:text-accent-hover\"><i class=\"fas fa-download\"></i></button> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.RenderScriptItems(ctx, templ_7745c5c3_Buffer, templ.JSFuncCall("deleteFile", file.ID))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 26, "<button onclick=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var21 templ.ComponentScript = templ.JSFuncCall("deleteFile", file.ID)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var21.Call)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 27, "\" class=\"text-red-600 hover:text-red-700\"><i class=\"fas fa-trash\"></i></button></div></td></tr>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func getFileIcon(fileType string) string {
	switch fileType {
	case "firmware":
		return "fa-microchip text-blue-500"
	case "config":
		return "fa-cog text-green-500"
	case "backup":
		return "fa-archive text-orange-500"
	case "script":
		return "fa-code text-purple-500"
	default:
		return "fa-file text-gray-500"
	}
}

func getTypeClass(fileType string) string {
	switch fileType {
	case "firmware":
		return "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200"
	case "config":
		return "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200"
	case "backup":
		return "bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200"
	case "script":
		return "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200"
	default:
		return "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200"
	}
}

var _ = templruntime.GeneratedTemplate
