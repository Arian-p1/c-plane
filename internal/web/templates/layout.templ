package templates

templ Navigation(currentPath string) {
	<ul class="nav-list">
		<li class="nav-item">
			<a href="/overview" class={ navItemClass(currentPath, "/overview") }>
				<i class="fas fa-dashboard nav-icon"></i>
				<span class="nav-text">Overview</span>
			</a>
		</li>
		<li class="nav-item">
			<a href="/devices" class={ navItemClass(currentPath, "/devices") }>
				<i class="fas fa-router nav-icon"></i>
				<span class="nav-text">Devices</span>
				<span id="device-count" class="nav-badge hidden">0</span>
			</a>
		</li>
		<li class="nav-item">
			<a href="/faults" class={ navItemClass(currentPath, "/faults") }>
				<i class="fas fa-exclamation-triangle nav-icon"></i>
				<span class="nav-text">Faults</span>
				<span id="fault-count" class="nav-badge nav-badge-danger hidden">0</span>
			</a>
		</li>
		<li class="nav-item">
			<a href="/files" class={ navItemClass(currentPath, "/files") }>
				<i class="fas fa-file nav-icon"></i>
				<span class="nav-text">Files</span>
			</a>
		</li>
	</ul>
}

func navItemClass(currentPath, itemPath string) string {
	baseClass := "nav-link"
	if currentPath == itemPath {
		return baseClass + " nav-link-active"
	}
	return baseClass
}

templ Page(title string, theme string, currentPath string) {
	@LayoutWithNav(title, theme, currentPath) {
		{ children... }
	}
}

templ LayoutWithNav(title string, theme string, currentPath string) {
	<!DOCTYPE html>
	<html lang="en" class={ func() string { if theme == "dark" { return "dark" } else { return "" } }() }>
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"/>
			<title>{ title } - GenieACS Gateway</title>
			<!-- Preload Critical Resources -->
			<link rel="preconnect" href="https://fonts.googleapis.com"/>
			<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
			<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet"/>
			<!-- FontAwesome Icons -->
			<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"/>
			<!-- Custom Styles -->
			<link rel="stylesheet" href="/static/styles.css"/>
			<!-- Favicon -->
			<link rel="icon" type="image/png" href="/static/favicon.png"/>
			<!-- Meta Tags -->
			<meta name="description" content="Nextranet Gateway - Professional TR-069 Device Management"/>
			<meta name="theme-color" content="#3b82f6"/>
			<meta name="apple-mobile-web-app-capable" content="yes"/>
			<meta name="apple-mobile-web-app-status-bar-style" content="default"/>
			<meta name="apple-mobile-web-app-title" content="Nextranet"/>
		</head>
		<body class="app-body">
			<!-- Loading Screen -->
			<div id="loading-screen" class="fixed inset-0 bg-white dark:bg-gray-900 z-50 flex items-center justify-center transition-opacity duration-300">
				<div class="text-center">
					<div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-500 mx-auto mb-4"></div>
					<p class="text-gray-600 dark:text-gray-400">Loading...</p>
				</div>
			</div>
			<div class="app-container">
				<!-- Mobile Sidebar Overlay -->
				<div id="sidebar-overlay" class="sidebar-overlay" onclick="closeMobileSidebar()"></div>
				<!-- Left Sidebar -->
				<aside id="sidebar" class="sidebar">
					<div class="sidebar-inner">
						<!-- Logo Section -->
						<div class="logo-section">
							<div class="logo-container">
								<div class="flex items-center gap-3">
									<img src="/static/nextranet%201.png" alt="Nextranet" class="logo-image w-10 h-10"/>
									<div class="flex flex-col">
										<span class="font-bold text-lg text-gray-800 dark:text-gray-200 leading-none">Nextranet</span>
										<span class="text-xs text-gray-500 dark:text-gray-400 leading-none">Gateway</span>
									</div>
								</div>
							</div>
						</div>
						<!-- Navigation Section -->
						<nav class="nav-section">
							@Navigation(currentPath)
						</nav>
						<!-- System Status Section -->
						<div class="status-section">
							<h3 class="text-xs font-semibold text-gray-400 dark:text-gray-500 uppercase tracking-wider mb-3">System Status</h3>
							<div id="system-status" class="status-list">
								<div class="status-item">
									<span class="status-label">CWMP Server</span>
									<span id="cwmp-status" class="status-indicator">
										<div class="status-icon"></div>
									</span>
								</div>
								<div class="status-item">
									<span class="status-label">NBI Interface</span>
									<span id="nbi-status" class="status-indicator">
										<div class="status-icon"></div>
									</span>
								</div>
								<div class="status-item">
									<span class="status-label">WebSocket</span>
									<span id="ws-status" class="status-indicator">
										<div class="status-icon"></div>
									</span>
								</div>
							</div>
						</div>
					</div>
				</aside>
				<!-- Main Content Area -->
				<main class="main-content">
					<!-- Top Header -->
					<header class="main-header">
						<div class="header-content">
							<div class="flex items-center gap-4">
								<!-- Mobile Menu Button -->
								<button id="mobile-menu-btn" class="mobile-menu-btn header-btn" type="button" aria-label="Toggle menu">
									<i class="fas fa-bars"></i>
								</button>
								<div class="flex flex-col">
									<h1 class="page-title">{ title }</h1>
									<div class="flex items-center gap-2 text-sm text-gray-500 dark:text-gray-400">
										<i class="fas fa-clock text-xs"></i>
										<span id="current-time"></span>
									</div>
								</div>
							</div>
							<div class="header-actions">
								<!-- Search Button -->
								<button class="header-btn tooltip" type="button" data-tooltip="Search" onclick="openSearch()">
									<i class="fas fa-search"></i>
								</button>
								<!-- Theme Toggle -->
								<button id="theme-toggle" class="header-btn tooltip" type="button" data-tooltip="Toggle theme">
									<i class="fas fa-moon theme-icon"></i>
								</button>
								<!-- Notifications -->
								<button class="header-btn tooltip" type="button" data-tooltip="Notifications" onclick="openNotifications()">
									<i class="fas fa-bell"></i>
									<span id="notification-badge" class="notification-dot hidden"></span>
								</button>
								<!-- User Menu -->
								<div class="user-menu">
									<button class="user-btn tooltip" type="button" data-tooltip="User menu" onclick="toggleUserMenu()">
										<i class="fas fa-user-circle user-icon"></i>
										<span class="user-name">Administrator</span>
										<i class="fas fa-chevron-down text-xs ml-1"></i>
									</button>
									<!-- User Dropdown -->
									<div id="user-dropdown" class="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 hidden z-50">
										<div class="py-2">
											<div class="px-4 py-2 border-b border-gray-200 dark:border-gray-700">
												<p class="text-sm font-medium text-gray-800 dark:text-gray-200">Administrator</p>
												<p class="text-xs text-gray-500 dark:text-gray-400">admin@genieacs.com</p>
											</div>
											<a href="/profile" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">
												<i class="fas fa-user mr-2"></i>Profile
											</a>
											<a href="/settings" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">
												<i class="fas fa-cog mr-2"></i>Settings
											</a>
											<div class="border-t border-gray-200 dark:border-gray-700 my-1"></div>
											<a href="/logout" class="block px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-gray-100 dark:hover:bg-gray-700">
												<i class="fas fa-sign-out-alt mr-2"></i>Logout
											</a>
										</div>
									</div>
								</div>
							</div>
						</div>
					</header>
					<!-- Page Content -->
					<div class="page-content">
						{ children... }
					</div>
				</main>
			</div>
			<!-- Search Modal -->
			<div id="search-modal" class="modal">
				<div class="modal-content p-6 max-w-2xl w-full mx-4">
					<div class="flex items-center justify-between mb-4">
						<h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200">Search</h3>
						<button onclick="closeSearch()" class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
							<i class="fas fa-times"></i>
						</button>
					</div>
					<div class="relative mb-4">
						<input
							type="text"
							id="search-input"
							placeholder="Search devices, faults, or files..."
							class="w-full pl-10 pr-4 py-3 border border-gray-200 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200"
						/>
						<i class="fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400"></i>
					</div>
					<div id="search-results" class="max-h-64 overflow-y-auto">
						<div class="text-center text-gray-500 dark:text-gray-400 py-8">
							<i class="fas fa-search text-3xl mb-2"></i>
							<p>Start typing to search...</p>
						</div>
					</div>
				</div>
			</div>
			<!-- Notifications Panel -->
			<div id="notifications-panel" class="fixed top-0 right-0 h-full w-96 bg-white dark:bg-gray-900 shadow-xl transform translate-x-full transition-transform duration-300 z-50">
				<div class="p-6 border-b border-gray-200 dark:border-gray-700">
					<div class="flex items-center justify-between">
						<h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200">Notifications</h3>
						<button onclick="closeNotifications()" class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
							<i class="fas fa-times"></i>
						</button>
					</div>
				</div>
				<div id="notifications-content" class="p-6">
					<div class="text-center text-gray-500 dark:text-gray-400">
						<i class="fas fa-bell text-3xl mb-2"></i>
						<p>No new notifications</p>
					</div>
				</div>
			</div>
			<!-- Notification Toast Container -->
			<div id="toast-container" class="fixed top-4 right-4 z-50 space-y-2"></div>
			<!-- JavaScript -->
			<script>
				// Global variables
				let ws = null;
				let reconnectInterval = null;
				let userMenuOpen = false;

				// Initialize app
				document.addEventListener('DOMContentLoaded', function() {
					initializeApp();
				});

				function initializeApp() {
					// Hide loading screen
					setTimeout(() => {
						const loadingScreen = document.getElementById('loading-screen');
						if (loadingScreen) {
							loadingScreen.style.opacity = '0';
							setTimeout(() => loadingScreen.remove(), 300);
						}
					}, 500);

					// Initialize clock
					updateClock();
					setInterval(updateClock, 1000);

					// Initialize mobile menu
					initializeMobileMenu();

					// Initialize theme toggle
					initializeThemeToggle();

					// Initialize WebSocket
					connectWebSocket();

					// Initialize user menu
					initializeUserMenu();

					// Check system status
					checkSystemStatus();

					// Load initial device and fault counts
					updateDeviceCount();
					updateFaultCount();

					// Close dropdowns on outside click
					document.addEventListener('click', handleOutsideClick);

					// Handle keyboard shortcuts
					document.addEventListener('keydown', handleKeyboardShortcuts);
				}

				// Clock functionality
				function updateClock() {
					const now = new Date();
					const timeString = now.toLocaleTimeString('en-US', {
						hour12: false,
						hour: '2-digit',
						minute: '2-digit'
					});
					const clockElement = document.getElementById('current-time');
					if (clockElement) {
						clockElement.textContent = timeString;
					}
				}

				// Mobile menu functionality
				function initializeMobileMenu() {
					const mobileMenuBtn = document.getElementById('mobile-menu-btn');
					if (mobileMenuBtn) {
						mobileMenuBtn.addEventListener('click', toggleMobileSidebar);
					}

					// Close sidebar when clicking nav links on mobile
					const navLinks = document.querySelectorAll('.nav-link');
					navLinks.forEach(link => {
						link.addEventListener('click', () => {
							if (window.innerWidth <= 768) {
								closeMobileSidebar();
							}
						});
					});

					// Handle window resize
					window.addEventListener('resize', () => {
						if (window.innerWidth > 768) {
							closeMobileSidebar();
						}
					});
				}

				function toggleMobileSidebar() {
					const sidebar = document.getElementById('sidebar');
					const overlay = document.getElementById('sidebar-overlay');

					if (sidebar && overlay) {
						const isOpen = sidebar.classList.contains('mobile-open');
						if (isOpen) {
							closeMobileSidebar();
						} else {
							openMobileSidebar();
						}
					}
				}

				function openMobileSidebar() {
					const sidebar = document.getElementById('sidebar');
					const overlay = document.getElementById('sidebar-overlay');

					if (sidebar && overlay) {
						sidebar.classList.add('mobile-open');
						overlay.classList.add('mobile-open');
						document.body.style.overflow = 'hidden';
					}
				}

				function closeMobileSidebar() {
					const sidebar = document.getElementById('sidebar');
					const overlay = document.getElementById('sidebar-overlay');

					if (sidebar && overlay) {
						sidebar.classList.remove('mobile-open');
						overlay.classList.remove('mobile-open');
						document.body.style.overflow = '';
					}
				}

				// Theme toggle functionality
				function initializeThemeToggle() {
					const themeToggle = document.getElementById('theme-toggle');
					if (themeToggle) {
						themeToggle.addEventListener('click', toggleTheme);
						updateThemeIcon();
					}
				}

				function toggleTheme() {
					const html = document.documentElement;
					const isDark = html.classList.contains('dark');

					if (isDark) {
						html.classList.remove('dark');
						localStorage.setItem('theme', 'light');
						document.cookie = 'theme=light; path=/';
					} else {
						html.classList.add('dark');
						localStorage.setItem('theme', 'dark');
						document.cookie = 'theme=dark; path=/';
					}

					updateThemeIcon();
					showToast('Theme updated', 'success');
				}

				function updateThemeIcon() {
					const icon = document.querySelector('#theme-toggle i');
					const isDark = document.documentElement.classList.contains('dark');

					if (icon) {
						icon.className = isDark ? 'fas fa-sun' : 'fas fa-moon';
					}
				}

				// User menu functionality
				function initializeUserMenu() {
					// Close user menu when clicking outside
					document.addEventListener('click', (e) => {
						const userMenu = document.querySelector('.user-menu');
						const userDropdown = document.getElementById('user-dropdown');

						if (userMenu && !userMenu.contains(e.target)) {
							userDropdown?.classList.add('hidden');
							userMenuOpen = false;
						}
					});
				}

				function toggleUserMenu() {
					const dropdown = document.getElementById('user-dropdown');
					if (dropdown) {
						dropdown.classList.toggle('hidden');
						userMenuOpen = !userMenuOpen;
					}
				}

				// Search functionality
				function openSearch() {
					const modal = document.getElementById('search-modal');
					const input = document.getElementById('search-input');

					if (modal) {
						modal.classList.add('show');
						setTimeout(() => input?.focus(), 100);
					}
				}

				function closeSearch() {
					const modal = document.getElementById('search-modal');
					if (modal) {
						modal.classList.remove('show');
					}
				}

				// Notifications functionality
				function openNotifications() {
					const panel = document.getElementById('notifications-panel');
					if (panel) {
						panel.style.transform = 'translateX(0)';
					}
				}

				function closeNotifications() {
					const panel = document.getElementById('notifications-panel');
					if (panel) {
						panel.style.transform = 'translateX(100%)';
					}
				}

				// Toast notifications
				function showToast(message, type = 'info', duration = 3000) {
					const container = document.getElementById('toast-container');
					if (!container) return;

					const toast = document.createElement('div');
					toast.className = `notification ${type} show`;
					toast.innerHTML = `
						<div class="flex items-center gap-3">
							<i class="fas fa-${getToastIcon(type)}"></i>
							<span>${message}</span>
							<button onclick="this.parentElement.parentElement.remove()" class="ml-auto">
								<i class="fas fa-times"></i>
							</button>
						</div>
					`;

					container.appendChild(toast);

					setTimeout(() => {
						toast.classList.remove('show');
						setTimeout(() => toast.remove(), 300);
					}, duration);
				}

				function getToastIcon(type) {
					switch (type) {
						case 'success': return 'check-circle';
						case 'error': return 'exclamation-circle';
						case 'warning': return 'exclamation-triangle';
						default: return 'info-circle';
					}
				}

				// WebSocket functionality
				function connectWebSocket() {
					const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
					const wsUrl = `${protocol}//${window.location.host}/ws`;

					try {
						ws = new WebSocket(wsUrl);

						ws.onopen = function() {
							console.log('WebSocket connected');
							updateConnectionStatus('ws-status', true);
							if (reconnectInterval) {
								clearInterval(reconnectInterval);
								reconnectInterval = null;
							}
						};

						ws.onmessage = function(event) {
							try {
								const data = JSON.parse(event.data);
								handleWebSocketMessage(data);
							} catch (e) {
								console.error('Error parsing WebSocket message:', e);
							}
						};

						ws.onclose = function() {
							console.log('WebSocket disconnected');
							updateConnectionStatus('ws-status', false);

							if (!reconnectInterval) {
								reconnectInterval = setInterval(connectWebSocket, 5000);
							}
						};

						ws.onerror = function(error) {
							console.error('WebSocket error:', error);
							updateConnectionStatus('ws-status', false);
						};
					} catch (error) {
						console.error('Failed to create WebSocket:', error);
						updateConnectionStatus('ws-status', false);
					}
				}

				function handleWebSocketMessage(data) {
					if (data.type === 'stats') {
						updateStats(data.payload);
					} else if (data.type === 'device_update') {
						updateDeviceCount();
						showToast('Device status updated', 'info');
					} else if (data.type === 'fault_update') {
						updateFaultCount();
						showToast('New fault detected', 'warning');
					} else if (data.type === 'notification') {
						showToast(data.message, data.level || 'info');
					}
				}

				function updateStats(stats) {
					// Update device count
					const deviceCountEl = document.getElementById('device-count');
					if (deviceCountEl && stats.devices) {
						const totalDevices = stats.devices.total || 0;
						deviceCountEl.textContent = totalDevices;
						if (totalDevices > 0) {
							deviceCountEl.classList.remove('hidden');
						}
					}

					// Update fault count
					const faultCountEl = document.getElementById('fault-count');
					if (faultCountEl && stats.faults) {
						const criticalFaults = stats.faults.critical || 0;
						faultCountEl.textContent = criticalFaults;
						if (criticalFaults > 0) {
							faultCountEl.classList.remove('hidden');
						} else {
							faultCountEl.classList.add('hidden');
						}
					}
				}

				function updateConnectionStatus(elementId, isConnected) {
					const element = document.getElementById(elementId);
					if (element) {
						const icon = element.querySelector('.status-icon');
						if (icon) {
							icon.classList.remove('text-success', 'text-danger');
							icon.classList.add(isConnected ? 'text-success' : 'text-danger');
						}
					}
				}

				function checkSystemStatus() {
					fetch('/api/stats/realtime')
						.then(res => res.json())
						.then(data => {
							if (data.system) {
								updateConnectionStatus('cwmp-status', data.system.cwmpConnected);
								updateConnectionStatus('nbi-status', data.system.nbiConnected);
							}
						})
						.catch(err => console.error('Failed to fetch system status:', err));
				}

				// Keyboard shortcuts
				function handleKeyboardShortcuts(e) {
					if (e.ctrlKey || e.metaKey) {
						switch (e.key) {
							case 'k':
								e.preventDefault();
								openSearch();
								break;
							case 'd':
								e.preventDefault();
								toggleTheme();
								break;
						}
					}

					if (e.key === 'Escape') {
						closeSearch();
						closeNotifications();
						closeMobileSidebar();
					}
				}

				// Handle outside clicks
				function handleOutsideClick(e) {
					// Close search modal
					const searchModal = document.getElementById('search-modal');
					if (searchModal && e.target === searchModal) {
						closeSearch();
					}

					// Close notifications panel
					const notificationsPanel = document.getElementById('notifications-panel');
					if (notificationsPanel && !notificationsPanel.contains(e.target) &&
						!e.target.closest('.header-btn')) {
						closeNotifications();
					}
				}

				// Utility functions
				function updateDeviceCount() {
					fetch('/api/stats/realtime')
						.then(res => res.json())
						.then(data => {
							const deviceCountEl = document.getElementById('device-count');
							if (deviceCountEl && data.devices && data.devices.total !== undefined) {
								const totalDevices = data.devices.total;
								deviceCountEl.textContent = totalDevices;
								if (totalDevices > 0) {
									deviceCountEl.classList.remove('hidden');
								} else {
									deviceCountEl.classList.add('hidden');
								}
							}
						})
						.catch(err => console.error('Failed to fetch device count:', err));
				}

				function updateFaultCount() {
					fetch('/api/stats/realtime')
						.then(res => res.json())
						.then(data => {
							const faultCountEl = document.getElementById('fault-count');
							if (faultCountEl && data.faults && data.faults.critical !== undefined) {
								const criticalFaults = data.faults.critical;
								faultCountEl.textContent = criticalFaults;
								if (criticalFaults > 0) {
									faultCountEl.classList.remove('hidden');
								} else {
									faultCountEl.classList.add('hidden');
								}
							}
						})
						.catch(err => console.error('Failed to fetch fault count:', err));
				}

				// Performance monitoring
				window.addEventListener('load', function() {
					if (window.performance && window.performance.timing) {
						const loadTime = window.performance.timing.loadEventEnd - window.performance.timing.navigationStart;
						console.log(`Page loaded in ${loadTime}ms`);
					}
				});

				// Service Worker registration (if available)
				if ('serviceWorker' in navigator) {
					window.addEventListener('load', function() {
						navigator.serviceWorker.register('/sw.js')
							.then(function(registration) {
								console.log('ServiceWorker registration successful');
							})
							.catch(function(err) {
								console.log('ServiceWorker registration failed');
							});
					});
				}
			</script>
		</body>
	</html>
}

templ Layout(title string, theme string) {
	<!DOCTYPE html>
	<html lang="en" class={ func() string { if theme == "dark" { return "dark" } else { return "" } }() }>
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>{ title } - Nextranet Gateway</title>
			<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"/>
			<link rel="stylesheet" href="/static/styles.css"/>
		</head>
		<body class="app-body">
			{ children... }
		</body>
	</html>
}
