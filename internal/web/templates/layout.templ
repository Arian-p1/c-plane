package templates

templ Layout(title string, theme string) {
	<!DOCTYPE html>
	<html lang="en" class={ func() string { if theme == "dark" { return "dark" } else { return "" } }() }>
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>{ title } - Nextranet</title>
			<!-- Tailwind CSS -->
			<script src="https://cdn.tailwindcss.com"></script>
			<script>
            tailwind.config = {
                darkMode: 'class',
                theme: {
                    extend: {
                        colors: {
                            'dark-bg': '#0f172a',
                            'dark-surface': '#1e293b',
                            'dark-border': '#334155',
                            'dark-text': '#e2e8f0',
                            'dark-muted': '#94a3b8',
                            'accent': '#3b82f6',
                            'accent-hover': '#2563eb',
                            'success': '#10b981',
                            'warning': '#f59e0b',
                            'danger': '#ef4444',
                            'info': '#06b6d4'
                        }
                    }
                }
            }
        </script>
			<!-- Icons -->
			<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"/>
			<!-- Custom styles -->
			<style>
            .dark body {
                background-color: #0f172a;
                color: #e2e8f0;
            }

            .dark .sidebar {
                background-color: #1e293b;
                border-right: 1px solid #334155;
            }

            .dark .card {
                background-color: #1e293b;
                border: 1px solid #334155;
            }

            .dark .table-row:hover {
                background-color: #334155;
            }

            /* Custom scrollbar for dark theme */
            .dark ::-webkit-scrollbar {
                width: 8px;
                height: 8px;
            }

            .dark ::-webkit-scrollbar-track {
                background: #1e293b;
            }

            .dark ::-webkit-scrollbar-thumb {
                background: #475569;
                border-radius: 4px;
            }

            .dark ::-webkit-scrollbar-thumb:hover {
                background: #64748b;
            }
        </style>
		</head>
		<body class="bg-gray-50 dark:bg-dark-bg transition-colors duration-200">
			<div class="app-container">
				<!-- Sidebar -->
				<aside class="sidebar shadow-lg">
					<div class="h-full flex flex-col">
						<!-- Logo -->
						<div class="p-4 border-b dark:border-dark-border">
							<div class="logo-container">
								<img src="/static/nextranet%201.png" alt="Nextranet"/>
							</div>
						</div>
						<!-- Navigation -->
						<nav class="flex-1 p-4 overflow-y-auto">
							@Navigation("/")
						</nav>
						<!-- System Status -->
						<div class="p-4 border-t dark:border-dark-border">
							<div id="system-status" class="space-y-2 text-sm">
								<div class="flex items-center justify-between">
									<span class="text-gray-600 dark:text-dark-muted">CWMP</span>
									<span id="cwmp-status" class="flex items-center">
										<i class="fas fa-circle text-gray-400 text-xs"></i>
									</span>
								</div>
								<div class="flex items-center justify-between">
									<span class="text-gray-600 dark:text-dark-muted">NBI</span>
									<span id="nbi-status" class="flex items-center">
										<i class="fas fa-circle text-gray-400 text-xs"></i>
									</span>
								</div>
								<div class="flex items-center justify-between">
									<span class="text-gray-600 dark:text-dark-muted">WebSocket</span>
									<span id="ws-status" class="flex items-center">
										<i class="fas fa-circle text-gray-400 text-xs"></i>
									</span>
								</div>
							</div>
						</div>
					</div>
				</aside>
				<!-- Main Content -->
				<main class="main-content">
					<!-- Top Bar -->
					<header class="bg-white dark:bg-dark-surface shadow-sm border-b dark:border-dark-border">
						<div class="flex items-center justify-between px-6 py-3">
							<h2 class="text-xl font-semibold text-gray-800 dark:text-dark-text">{ title }</h2>
							<div class="flex items-center space-x-4">
								<!-- Theme Toggle -->
								<button id="theme-toggle" class="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-dark-bg transition-colors">
									<i class="fas fa-moon dark:fa-sun text-gray-600 dark:text-dark-muted"></i>
								</button>
								<!-- Notifications -->
								<button class="relative p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-dark-bg transition-colors">
									<i class="fas fa-bell text-gray-600 dark:text-dark-muted"></i>
									<span id="notification-badge" class="absolute top-0 right-0 w-2 h-2 bg-danger rounded-full hidden"></span>
								</button>
								<!-- User Menu -->
								<div class="relative">
									<button class="flex items-center space-x-2 p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-dark-bg transition-colors">
										<i class="fas fa-user-circle text-gray-600 dark:text-dark-muted text-lg"></i>
										<span class="text-sm text-gray-700 dark:text-dark-text">Admin</span>
									</button>
								</div>
							</div>
						</div>
					</header>
					<!-- Page Content -->
					<div class="content-wrapper">
						{ children... }
					</div>
				</main>
			</div>
			<!-- WebSocket Script -->
			<script>
            let ws = null;
            let reconnectInterval = null;

            function connectWebSocket() {
                const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                const wsUrl = `${protocol}//${window.location.host}/ws`;

                ws = new WebSocket(wsUrl);

                ws.onopen = function() {
                    console.log('WebSocket connected');
                    updateConnectionStatus('ws-status', true);

                    if (reconnectInterval) {
                        clearInterval(reconnectInterval);
                        reconnectInterval = null;
                    }
                };

                ws.onmessage = function(event) {
                    const data = JSON.parse(event.data);
                    handleWebSocketMessage(data);
                };

                ws.onclose = function() {
                    console.log('WebSocket disconnected');
                    updateConnectionStatus('ws-status', false);

                    // Attempt to reconnect every 5 seconds
                    if (!reconnectInterval) {
                        reconnectInterval = setInterval(connectWebSocket, 5000);
                    }
                };

                ws.onerror = function(error) {
                    console.error('WebSocket error:', error);
                };
            }

            function handleWebSocketMessage(data) {
                switch(data.type) {
                    case 'stats_update':
                        updateStats(data.data);
                        break;
                    case 'device_status':
                        updateDeviceStatus(data.data);
                        break;
                    case 'fault_alert':
                        showFaultAlert(data.data);
                        break;
                    case 'system_status':
                        updateSystemStatus(data.data);
                        break;
                }
            }

            function updateConnectionStatus(elementId, connected) {
                const element = document.getElementById(elementId);
                if (element) {
                    const icon = element.querySelector('i');
                    if (connected) {
                        icon.classList.remove('text-gray-400', 'text-danger');
                        icon.classList.add('text-success');
                    } else {
                        icon.classList.remove('text-success');
                        icon.classList.add('text-danger');
                    }
                }
            }

            function updateSystemStatus(status) {
                updateConnectionStatus('cwmp-status', status.cwmpConnected);
                updateConnectionStatus('nbi-status', status.nbiConnected);
            }

            // Theme toggle
            document.getElementById('theme-toggle').addEventListener('click', function() {
                const html = document.documentElement;
                const isDark = html.classList.contains('dark');

                if (isDark) {
                    html.classList.remove('dark');
                    localStorage.setItem('theme', 'light');
                    document.cookie = 'theme=light; path=/';
                } else {
                    html.classList.add('dark');
                    localStorage.setItem('theme', 'dark');
                    document.cookie = 'theme=dark; path=/';
                }

                // Update icon
                const icon = this.querySelector('i');
                icon.classList.toggle('fa-moon');
                icon.classList.toggle('fa-sun');
            });

            // Initialize WebSocket connection
            connectWebSocket();

            // Check system status on load
            fetch('/api/stats/realtime')
                .then(res => res.json())
                .then(data => {
                    updateSystemStatus(data.system);
                });
        </script>
		</body>
	</html>
}

templ Navigation(currentPath string) {
	<ul class="space-y-2">
		<li>
			<a href="/overview" class={ navItemClass(currentPath, "/overview") }>
				<i class="fas fa-dashboard mr-3 flex-shrink-0"></i>
				<span class="flex-1 min-w-0">Overview</span>
			</a>
		</li>
		<li>
			<a href="/devices" class={ navItemClass(currentPath, "/devices") }>
				<i class="fas fa-router mr-3 flex-shrink-0"></i>
				<span class="flex-1 min-w-0 truncate">Devices</span>
				<span id="device-count" class="ml-2 bg-gray-200 dark:bg-dark-bg text-gray-700 dark:text-dark-muted px-2 py-1 rounded-full text-xs flex-shrink-0">0</span>
			</a>
		</li>
		<li>
			<a href="/files" class={ navItemClass(currentPath, "/files") }>
				<i class="fas fa-file mr-3 flex-shrink-0"></i>
				<span class="flex-1 min-w-0 truncate">Files</span>
			</a>
		</li>
		<li>
			<a href="/faults" class={ navItemClass(currentPath, "/faults") }>
				<i class="fas fa-exclamation-triangle mr-3 flex-shrink-0"></i>
				<span class="flex-1 min-w-0 truncate">Faults</span>
				<span id="fault-count" class="ml-2 bg-danger text-white px-2 py-1 rounded-full text-xs flex-shrink-0 hidden">0</span>
			</a>
		</li>
	</ul>
}

func navItemClass(currentPath, itemPath string) string {
	baseClass := "flex items-center px-4 py-2 rounded-lg transition-colors"
	if currentPath == itemPath {
		return baseClass + " bg-accent text-white"
	}
	return baseClass + " text-gray-700 dark:text-dark-text hover:bg-gray-100 dark:hover:bg-dark-bg"
}

templ Page(title string, theme string, currentPath string) {
	@LayoutWithNav(title, theme, currentPath) {
		{ children... }
	}
}

templ LayoutWithNav(title string, theme string, currentPath string) {
	<!DOCTYPE html>
	<html lang="en" class={ func() string { if theme == "dark" { return "dark" } else { return "" } }() }>
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>{ title } - Nextranet</title>
			<!-- Tailwind CSS -->
			<script src="https://cdn.tailwindcss.com"></script>
			<script>
            tailwind.config = {
                darkMode: 'class',
                theme: {
                    extend: {
                        colors: {
                            'dark-bg': '#0f172a',
                            'dark-surface': '#1e293b',
                            'dark-border': '#334155',
                            'dark-text': '#e2e8f0',
                            'dark-muted': '#94a3b8',
                            'accent': '#3b82f6',
                            'accent-hover': '#2563eb',
                            'success': '#10b981',
                            'warning': '#f59e0b',
                            'danger': '#ef4444',
                            'info': '#06b6d4'
                        }
                    }
                }
            }
        </script>
			<!-- Icons -->
			<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"/>
			<!-- Custom styles -->
			<style>
            .dark body {
                background-color: #0f172a;
                color: #e2e8f0;
            }

            .dark .sidebar {
                background-color: #1e293b;
                border-right: 1px solid #334155;
            }

            .dark .card {
                background-color: #1e293b;
                border: 1px solid #334155;
            }

            .dark .table-row:hover {
                background-color: #334155;
            }

            /* Custom scrollbar for dark theme */
            .dark ::-webkit-scrollbar {
                width: 8px;
                height: 8px;
            }

            .dark ::-webkit-scrollbar-track {
                background: #1e293b;
            }

            .dark ::-webkit-scrollbar-thumb {
                background: #475569;
                border-radius: 4px;
            }

            .dark ::-webkit-scrollbar-thumb:hover {
                background: #64748b;
            }
        </style>
		</head>
		<body class="bg-gray-50 dark:bg-dark-bg transition-colors duration-200">
			<div class="app-container">
				<!-- Sidebar -->
				<aside class="sidebar shadow-lg">
					<div class="h-full flex flex-col">
						<!-- Logo -->
						<div class="p-4 border-b dark:border-dark-border">
							<div class="logo-container">
								<img src="/static/nextranet%201.png" alt="Nextranet"/>
							</div>
						</div>
						<!-- Navigation -->
						<nav class="flex-1 p-4 overflow-y-auto">
							@Navigation(currentPath)
						</nav>
						<!-- System Status -->
						<div class="p-4 border-t dark:border-dark-border">
							<div id="system-status" class="space-y-2 text-sm">
								<div class="flex items-center justify-between">
									<span class="text-gray-600 dark:text-dark-muted">CWMP</span>
									<span id="cwmp-status" class="flex items-center">
										<i class="fas fa-circle text-gray-400 text-xs"></i>
									</span>
								</div>
								<div class="flex items-center justify-between">
									<span class="text-gray-600 dark:text-dark-muted">NBI</span>
									<span id="nbi-status" class="flex items-center">
										<i class="fas fa-circle text-gray-400 text-xs"></i>
									</span>
								</div>
								<div class="flex items-center justify-between">
									<span class="text-gray-600 dark:text-dark-muted">WebSocket</span>
									<span id="ws-status" class="flex items-center">
										<i class="fas fa-circle text-gray-400 text-xs"></i>
									</span>
								</div>
							</div>
						</div>
					</div>
				</aside>
				<!-- Main Content -->
				<main class="main-content">
					<!-- Top Bar -->
					<header class="bg-white dark:bg-dark-surface shadow-sm border-b dark:border-dark-border">
						<div class="flex items-center justify-between px-6 py-3">
							<h2 class="text-xl font-semibold text-gray-800 dark:text-dark-text">{ title }</h2>
							<div class="flex items-center space-x-4">
								<!-- Theme Toggle -->
								<button id="theme-toggle" class="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-dark-bg transition-colors">
									<i class="fas fa-moon dark:fa-sun text-gray-600 dark:text-dark-muted"></i>
								</button>
								<!-- Notifications -->
								<button class="relative p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-dark-bg transition-colors">
									<i class="fas fa-bell text-gray-600 dark:text-dark-muted"></i>
									<span id="notification-badge" class="absolute top-0 right-0 w-2 h-2 bg-danger rounded-full hidden"></span>
								</button>
								<!-- User Menu -->
								<div class="relative">
									<button class="flex items-center space-x-2 p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-dark-bg transition-colors">
										<i class="fas fa-user-circle text-gray-600 dark:text-dark-muted text-lg"></i>
										<span class="text-sm text-gray-700 dark:text-dark-text">Admin</span>
									</button>
								</div>
							</div>
						</div>
					</header>
					<!-- Page Content -->
					<div class="content-wrapper">
						{ children... }
					</div>
				</main>
			</div>
			<!-- WebSocket Script -->
			<script>
            let ws = null;
            let reconnectInterval = null;

            function connectWebSocket() {
                const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                const wsUrl = `${protocol}//${window.location.host}/ws`;

                ws = new WebSocket(wsUrl);

                ws.onopen = function() {
                    console.log('WebSocket connected');
                    updateConnectionStatus('ws-status', true);

                    if (reconnectInterval) {
                        clearInterval(reconnectInterval);
                        reconnectInterval = null;
                    }
                };

                ws.onmessage = function(event) {
                    const data = JSON.parse(event.data);
                    handleWebSocketMessage(data);
                };

                ws.onclose = function() {
                    console.log('WebSocket disconnected');
                    updateConnectionStatus('ws-status', false);

                    // Attempt to reconnect every 5 seconds
                    if (!reconnectInterval) {
                        reconnectInterval = setInterval(connectWebSocket, 5000);
                    }
                };

                ws.onerror = function(error) {
                    console.error('WebSocket error:', error);
                };
            }

            function handleWebSocketMessage(data) {
                switch(data.type) {
                    case 'stats_update':
                        updateStats(data.data);
                        break;
                    case 'device_status':
                        updateDeviceStatus(data.data);
                        break;
                    case 'fault_alert':
                        showFaultAlert(data.data);
                        break;
                    case 'system_status':
                        updateSystemStatus(data.data);
                        break;
                }
            }

            function updateConnectionStatus(elementId, connected) {
                const element = document.getElementById(elementId);
                if (element) {
                    const icon = element.querySelector('i');
                    if (connected) {
                        icon.classList.remove('text-gray-400', 'text-danger');
                        icon.classList.add('text-success');
                    } else {
                        icon.classList.remove('text-success');
                        icon.classList.add('text-danger');
                    }
                }
            }

            function updateSystemStatus(status) {
                updateConnectionStatus('cwmp-status', status.cwmpConnected);
                updateConnectionStatus('nbi-status', status.nbiConnected);
            }

            // Theme toggle
            document.getElementById('theme-toggle').addEventListener('click', function() {
                const html = document.documentElement;
                const isDark = html.classList.contains('dark');

                if (isDark) {
                    html.classList.remove('dark');
                    localStorage.setItem('theme', 'light');
                    document.cookie = 'theme=light; path=/';
                } else {
                    html.classList.add('dark');
                    localStorage.setItem('theme', 'dark');
                    document.cookie = 'theme=dark; path=/';
                }

                // Update icon
                const icon = this.querySelector('i');
                icon.classList.toggle('fa-moon');
                icon.classList.toggle('fa-sun');
            });

            // Initialize WebSocket connection
            connectWebSocket();

            // Check system status on load
            fetch('/api/stats/realtime')
                .then(res => res.json())
                .then(data => {
                    updateSystemStatus(data.system);
                });
        </script>
		</body>
	</html>
}
