// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.920
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Layout(title string, theme string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 = []any{func() string {
			if theme == "dark" {
				return "dark"
			} else {
				return ""
			}
		}()}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<html lang=\"en\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `layout.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `layout.templ`, Line: 9, Col: 17}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, " - Nextranet</title><!-- Tailwind CSS --><script src=\"https://cdn.tailwindcss.com\"></script><script>\n            tailwind.config = {\n                darkMode: 'class',\n                theme: {\n                    extend: {\n                        colors: {\n                            'dark-bg': '#0f172a',\n                            'dark-surface': '#1e293b',\n                            'dark-border': '#334155',\n                            'dark-text': '#e2e8f0',\n                            'dark-muted': '#94a3b8',\n                            'accent': '#3b82f6',\n                            'accent-hover': '#2563eb',\n                            'success': '#10b981',\n                            'warning': '#f59e0b',\n                            'danger': '#ef4444',\n                            'info': '#06b6d4'\n                        }\n                    }\n                }\n            }\n        </script><!-- Icons --><link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\"><!-- Custom styles --><style>\n            .dark body {\n                background-color: #0f172a;\n                color: #e2e8f0;\n            }\n\n            .dark .sidebar {\n                background-color: #1e293b;\n                border-right: 1px solid #334155;\n            }\n\n            .dark .card {\n                background-color: #1e293b;\n                border: 1px solid #334155;\n            }\n\n            .dark .table-row:hover {\n                background-color: #334155;\n            }\n\n            /* Custom scrollbar for dark theme */\n            .dark ::-webkit-scrollbar {\n                width: 8px;\n                height: 8px;\n            }\n\n            .dark ::-webkit-scrollbar-track {\n                background: #1e293b;\n            }\n\n            .dark ::-webkit-scrollbar-thumb {\n                background: #475569;\n                border-radius: 4px;\n            }\n\n            .dark ::-webkit-scrollbar-thumb:hover {\n                background: #64748b;\n            }\n        </style></head><body class=\"bg-gray-50 dark:bg-dark-bg transition-colors duration-200\"><div class=\"app-container\"><!-- Sidebar --><aside class=\"sidebar shadow-lg\"><div class=\"h-full flex flex-col\"><!-- Logo --><div class=\"p-4 border-b dark:border-dark-border\"><div class=\"logo-container\"><img src=\"/static/nextranet%201.png\" alt=\"Nextranet\"></div></div><!-- Navigation --><nav class=\"flex-1 p-4 overflow-y-auto\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Navigation("/").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</nav><!-- System Status --><div class=\"p-4 border-t dark:border-dark-border\"><div id=\"system-status\" class=\"space-y-2 text-sm\"><div class=\"flex items-center justify-between\"><span class=\"text-gray-600 dark:text-dark-muted\">CWMP</span> <span id=\"cwmp-status\" class=\"flex items-center\"><i class=\"fas fa-circle text-gray-400 text-xs\"></i></span></div><div class=\"flex items-center justify-between\"><span class=\"text-gray-600 dark:text-dark-muted\">NBI</span> <span id=\"nbi-status\" class=\"flex items-center\"><i class=\"fas fa-circle text-gray-400 text-xs\"></i></span></div><div class=\"flex items-center justify-between\"><span class=\"text-gray-600 dark:text-dark-muted\">WebSocket</span> <span id=\"ws-status\" class=\"flex items-center\"><i class=\"fas fa-circle text-gray-400 text-xs\"></i></span></div></div></div></div></aside><!-- Main Content --><main class=\"main-content\"><!-- Top Bar --><header class=\"bg-white dark:bg-dark-surface shadow-sm border-b dark:border-dark-border\"><div class=\"flex items-center justify-between px-6 py-3\"><h2 class=\"text-xl font-semibold text-gray-800 dark:text-dark-text\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 string
		templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `layout.templ`, Line: 122, Col: 82}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "</h2><div class=\"flex items-center space-x-4\"><!-- Theme Toggle --><button id=\"theme-toggle\" class=\"p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-dark-bg transition-colors\"><i class=\"fas fa-moon dark:fa-sun text-gray-600 dark:text-dark-muted\"></i></button><!-- Notifications --><button class=\"relative p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-dark-bg transition-colors\"><i class=\"fas fa-bell text-gray-600 dark:text-dark-muted\"></i> <span id=\"notification-badge\" class=\"absolute top-0 right-0 w-2 h-2 bg-danger rounded-full hidden\"></span></button><!-- User Menu --><div class=\"relative\"><button class=\"flex items-center space-x-2 p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-dark-bg transition-colors\"><i class=\"fas fa-user-circle text-gray-600 dark:text-dark-muted text-lg\"></i> <span class=\"text-sm text-gray-700 dark:text-dark-text\">Admin</span></button></div></div></div></header><!-- Page Content --><div class=\"content-wrapper\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "</div></main></div><!-- WebSocket Script --><script>\n            let ws = null;\n            let reconnectInterval = null;\n\n            function connectWebSocket() {\n                const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n                const wsUrl = `${protocol}//${window.location.host}/ws`;\n\n                ws = new WebSocket(wsUrl);\n\n                ws.onopen = function() {\n                    console.log('WebSocket connected');\n                    updateConnectionStatus('ws-status', true);\n\n                    if (reconnectInterval) {\n                        clearInterval(reconnectInterval);\n                        reconnectInterval = null;\n                    }\n                };\n\n                ws.onmessage = function(event) {\n                    const data = JSON.parse(event.data);\n                    handleWebSocketMessage(data);\n                };\n\n                ws.onclose = function() {\n                    console.log('WebSocket disconnected');\n                    updateConnectionStatus('ws-status', false);\n\n                    // Attempt to reconnect every 5 seconds\n                    if (!reconnectInterval) {\n                        reconnectInterval = setInterval(connectWebSocket, 5000);\n                    }\n                };\n\n                ws.onerror = function(error) {\n                    console.error('WebSocket error:', error);\n                };\n            }\n\n            function handleWebSocketMessage(data) {\n                switch(data.type) {\n                    case 'stats_update':\n                        updateStats(data.data);\n                        break;\n                    case 'device_status':\n                        updateDeviceStatus(data.data);\n                        break;\n                    case 'fault_alert':\n                        showFaultAlert(data.data);\n                        break;\n                    case 'system_status':\n                        updateSystemStatus(data.data);\n                        break;\n                }\n            }\n\n            function updateConnectionStatus(elementId, connected) {\n                const element = document.getElementById(elementId);\n                if (element) {\n                    const icon = element.querySelector('i');\n                    if (connected) {\n                        icon.classList.remove('text-gray-400', 'text-danger');\n                        icon.classList.add('text-success');\n                    } else {\n                        icon.classList.remove('text-success');\n                        icon.classList.add('text-danger');\n                    }\n                }\n            }\n\n            function updateSystemStatus(status) {\n                updateConnectionStatus('cwmp-status', status.cwmpConnected);\n                updateConnectionStatus('nbi-status', status.nbiConnected);\n            }\n\n            // Theme toggle\n            document.getElementById('theme-toggle').addEventListener('click', function() {\n                const html = document.documentElement;\n                const isDark = html.classList.contains('dark');\n\n                if (isDark) {\n                    html.classList.remove('dark');\n                    localStorage.setItem('theme', 'light');\n                    document.cookie = 'theme=light; path=/';\n                } else {\n                    html.classList.add('dark');\n                    localStorage.setItem('theme', 'dark');\n                    document.cookie = 'theme=dark; path=/';\n                }\n\n                // Update icon\n                const icon = this.querySelector('i');\n                icon.classList.toggle('fa-moon');\n                icon.classList.toggle('fa-sun');\n            });\n\n            // Initialize WebSocket connection\n            connectWebSocket();\n\n            // Check system status on load\n            fetch('/api/stats/realtime')\n                .then(res => res.json())\n                .then(data => {\n                    updateSystemStatus(data.system);\n                });\n        </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func Navigation(currentPath string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var6 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var6 == nil {
			templ_7745c5c3_Var6 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "<ul class=\"space-y-2\"><li>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var7 = []any{navItemClass(currentPath, "/overview")}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var7...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "<a href=\"/overview\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var8 string
		templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var7).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `layout.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "\"><i class=\"fas fa-dashboard mr-3 flex-shrink-0\"></i> <span class=\"flex-1 min-w-0\">Overview</span></a></li><li>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var9 = []any{navItemClass(currentPath, "/devices")}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var9...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "<a href=\"/devices\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var10 string
		templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var9).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `layout.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "\"><i class=\"fas fa-router mr-3 flex-shrink-0\"></i> <span class=\"flex-1 min-w-0 truncate\">Devices</span> <span id=\"device-count\" class=\"ml-2 bg-gray-200 dark:bg-dark-bg text-gray-700 dark:text-dark-muted px-2 py-1 rounded-full text-xs flex-shrink-0\">0</span></a></li><li>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var11 = []any{navItemClass(currentPath, "/files")}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var11...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "<a href=\"/files\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var12 string
		templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var11).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `layout.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "\"><i class=\"fas fa-file mr-3 flex-shrink-0\"></i> <span class=\"flex-1 min-w-0 truncate\">Files</span></a></li><li>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var13 = []any{navItemClass(currentPath, "/faults")}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var13...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "<a href=\"/faults\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var14 string
		templ_7745c5c3_Var14, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var13).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `layout.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var14))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "\"><i class=\"fas fa-exclamation-triangle mr-3 flex-shrink-0\"></i> <span class=\"flex-1 min-w-0 truncate\">Faults</span> <span id=\"fault-count\" class=\"ml-2 bg-danger text-white px-2 py-1 rounded-full text-xs flex-shrink-0 hidden\">0</span></a></li></ul>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func navItemClass(currentPath, itemPath string) string {
	baseClass := "flex items-center px-4 py-2 rounded-lg transition-colors"
	if currentPath == itemPath {
		return baseClass + " bg-accent text-white"
	}
	return baseClass + " text-gray-700 dark:text-dark-text hover:bg-gray-100 dark:hover:bg-dark-bg"
}

func Page(title string, theme string, currentPath string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var15 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var15 == nil {
			templ_7745c5c3_Var15 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var16 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templ_7745c5c3_Var15.Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = LayoutWithNav(title, theme, currentPath).Render(templ.WithChildren(ctx, templ_7745c5c3_Var16), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func LayoutWithNav(title string, theme string, currentPath string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var17 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var17 == nil {
			templ_7745c5c3_Var17 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "<!doctype html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var18 = []any{func() string {
			if theme == "dark" {
				return "dark"
			} else {
				return ""
			}
		}()}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var18...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "<html lang=\"en\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var19 string
		templ_7745c5c3_Var19, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var18).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `layout.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var19))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var20 string
		templ_7745c5c3_Var20, templ_7745c5c3_Err = templ.JoinStringErrs(title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `layout.templ`, Line: 312, Col: 17}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var20))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, " - Nextranet</title><!-- Tailwind CSS --><script src=\"https://cdn.tailwindcss.com\"></script><script>\n            tailwind.config = {\n                darkMode: 'class',\n                theme: {\n                    extend: {\n                        colors: {\n                            'dark-bg': '#0f172a',\n                            'dark-surface': '#1e293b',\n                            'dark-border': '#334155',\n                            'dark-text': '#e2e8f0',\n                            'dark-muted': '#94a3b8',\n                            'accent': '#3b82f6',\n                            'accent-hover': '#2563eb',\n                            'success': '#10b981',\n                            'warning': '#f59e0b',\n                            'danger': '#ef4444',\n                            'info': '#06b6d4'\n                        }\n                    }\n                }\n            }\n        </script><!-- Icons --><link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\"><!-- Custom styles --><style>\n            .dark body {\n                background-color: #0f172a;\n                color: #e2e8f0;\n            }\n\n            .dark .sidebar {\n                background-color: #1e293b;\n                border-right: 1px solid #334155;\n            }\n\n            .dark .card {\n                background-color: #1e293b;\n                border: 1px solid #334155;\n            }\n\n            .dark .table-row:hover {\n                background-color: #334155;\n            }\n\n            /* Custom scrollbar for dark theme */\n            .dark ::-webkit-scrollbar {\n                width: 8px;\n                height: 8px;\n            }\n\n            .dark ::-webkit-scrollbar-track {\n                background: #1e293b;\n            }\n\n            .dark ::-webkit-scrollbar-thumb {\n                background: #475569;\n                border-radius: 4px;\n            }\n\n            .dark ::-webkit-scrollbar-thumb:hover {\n                background: #64748b;\n            }\n        </style></head><body class=\"bg-gray-50 dark:bg-dark-bg transition-colors duration-200\"><div class=\"app-container\"><!-- Sidebar --><aside class=\"sidebar shadow-lg\"><div class=\"h-full flex flex-col\"><!-- Logo --><div class=\"p-4 border-b dark:border-dark-border\"><div class=\"logo-container\"><img src=\"/static/nextranet%201.png\" alt=\"Nextranet\"></div></div><!-- Navigation --><nav class=\"flex-1 p-4 overflow-y-auto\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Navigation(currentPath).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, "</nav><!-- System Status --><div class=\"p-4 border-t dark:border-dark-border\"><div id=\"system-status\" class=\"space-y-2 text-sm\"><div class=\"flex items-center justify-between\"><span class=\"text-gray-600 dark:text-dark-muted\">CWMP</span> <span id=\"cwmp-status\" class=\"flex items-center\"><i class=\"fas fa-circle text-gray-400 text-xs\"></i></span></div><div class=\"flex items-center justify-between\"><span class=\"text-gray-600 dark:text-dark-muted\">NBI</span> <span id=\"nbi-status\" class=\"flex items-center\"><i class=\"fas fa-circle text-gray-400 text-xs\"></i></span></div><div class=\"flex items-center justify-between\"><span class=\"text-gray-600 dark:text-dark-muted\">WebSocket</span> <span id=\"ws-status\" class=\"flex items-center\"><i class=\"fas fa-circle text-gray-400 text-xs\"></i></span></div></div></div></div></aside><!-- Main Content --><main class=\"main-content\"><!-- Top Bar --><header class=\"bg-white dark:bg-dark-surface shadow-sm border-b dark:border-dark-border\"><div class=\"flex items-center justify-between px-6 py-3\"><h2 class=\"text-xl font-semibold text-gray-800 dark:text-dark-text\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var21 string
		templ_7745c5c3_Var21, templ_7745c5c3_Err = templ.JoinStringErrs(title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `layout.templ`, Line: 425, Col: 82}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var21))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, "</h2><div class=\"flex items-center space-x-4\"><!-- Theme Toggle --><button id=\"theme-toggle\" class=\"p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-dark-bg transition-colors\"><i class=\"fas fa-moon dark:fa-sun text-gray-600 dark:text-dark-muted\"></i></button><!-- Notifications --><button class=\"relative p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-dark-bg transition-colors\"><i class=\"fas fa-bell text-gray-600 dark:text-dark-muted\"></i> <span id=\"notification-badge\" class=\"absolute top-0 right-0 w-2 h-2 bg-danger rounded-full hidden\"></span></button><!-- User Menu --><div class=\"relative\"><button class=\"flex items-center space-x-2 p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-dark-bg transition-colors\"><i class=\"fas fa-user-circle text-gray-600 dark:text-dark-muted text-lg\"></i> <span class=\"text-sm text-gray-700 dark:text-dark-text\">Admin</span></button></div></div></div></header><!-- Page Content --><div class=\"content-wrapper\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var17.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, "</div></main></div><!-- WebSocket Script --><script>\n            let ws = null;\n            let reconnectInterval = null;\n\n            function connectWebSocket() {\n                const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n                const wsUrl = `${protocol}//${window.location.host}/ws`;\n\n                ws = new WebSocket(wsUrl);\n\n                ws.onopen = function() {\n                    console.log('WebSocket connected');\n                    updateConnectionStatus('ws-status', true);\n\n                    if (reconnectInterval) {\n                        clearInterval(reconnectInterval);\n                        reconnectInterval = null;\n                    }\n                };\n\n                ws.onmessage = function(event) {\n                    const data = JSON.parse(event.data);\n                    handleWebSocketMessage(data);\n                };\n\n                ws.onclose = function() {\n                    console.log('WebSocket disconnected');\n                    updateConnectionStatus('ws-status', false);\n\n                    // Attempt to reconnect every 5 seconds\n                    if (!reconnectInterval) {\n                        reconnectInterval = setInterval(connectWebSocket, 5000);\n                    }\n                };\n\n                ws.onerror = function(error) {\n                    console.error('WebSocket error:', error);\n                };\n            }\n\n            function handleWebSocketMessage(data) {\n                switch(data.type) {\n                    case 'stats_update':\n                        updateStats(data.data);\n                        break;\n                    case 'device_status':\n                        updateDeviceStatus(data.data);\n                        break;\n                    case 'fault_alert':\n                        showFaultAlert(data.data);\n                        break;\n                    case 'system_status':\n                        updateSystemStatus(data.data);\n                        break;\n                }\n            }\n\n            function updateConnectionStatus(elementId, connected) {\n                const element = document.getElementById(elementId);\n                if (element) {\n                    const icon = element.querySelector('i');\n                    if (connected) {\n                        icon.classList.remove('text-gray-400', 'text-danger');\n                        icon.classList.add('text-success');\n                    } else {\n                        icon.classList.remove('text-success');\n                        icon.classList.add('text-danger');\n                    }\n                }\n            }\n\n            function updateSystemStatus(status) {\n                updateConnectionStatus('cwmp-status', status.cwmpConnected);\n                updateConnectionStatus('nbi-status', status.nbiConnected);\n            }\n\n            // Theme toggle\n            document.getElementById('theme-toggle').addEventListener('click', function() {\n                const html = document.documentElement;\n                const isDark = html.classList.contains('dark');\n\n                if (isDark) {\n                    html.classList.remove('dark');\n                    localStorage.setItem('theme', 'light');\n                    document.cookie = 'theme=light; path=/';\n                } else {\n                    html.classList.add('dark');\n                    localStorage.setItem('theme', 'dark');\n                    document.cookie = 'theme=dark; path=/';\n                }\n\n                // Update icon\n                const icon = this.querySelector('i');\n                icon.classList.toggle('fa-moon');\n                icon.classList.toggle('fa-sun');\n            });\n\n            // Initialize WebSocket connection\n            connectWebSocket();\n\n            // Check system status on load\n            fetch('/api/stats/realtime')\n                .then(res => res.json())\n                .then(data => {\n                    updateSystemStatus(data.system);\n                });\n        </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
