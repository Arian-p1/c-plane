package templates

import (
	"fmt"
	"github.com/nextranet/gateway/c-plane/internal/models"
)

templ OverviewPage(data OverviewData) {
	@Page(data.Title, data.Theme, "/overview") {
		<div class="space-y-8 animate-fade-in">
			<!-- Welcome Section -->
			<div class="bg-gradient-to-r from-primary-500 to-primary-600 rounded-xl p-6 text-white">
				<div class="flex items-center justify-between">
					<div>
						<h2 class="text-2xl font-bold mb-2">Welcome to Nextranet Gateway</h2>
						<p class="text-primary-100">Manage your TR-069 devices with ease</p>
					</div>
					<div class="text-6xl opacity-20">
						<i class="fas fa-network-wired"></i>
					</div>
				</div>
			</div>
			<!-- Statistics Cards -->
			<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
				@StatCard("Total Devices", data.Stats.TotalDevices, "fa-router", "primary")
				@StatCard("Online Devices", data.Stats.OnlineDevices, "fa-wifi", "success")
				@StatCard("Active Faults", data.Stats.ActiveFaults, "fa-exclamation-triangle", "warning")
				@StatCard("Critical Faults", data.Stats.CriticalFaults, "fa-exclamation-circle", "danger")
			</div>
			<!-- Health Score and Quick Actions -->
			<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
				<!-- Health Score -->
				<div class="card p-8 text-center">
					<h3 class="text-xl font-bold mb-6 text-gray-800 dark:text-gray-200 flex items-center justify-center gap-2">
						<i class="fas fa-heartbeat text-primary-500"></i>
						System Health
					</h3>
					<div class="relative mb-6">
						@HealthGauge(data.Stats.HealthScore)
					</div>
					<div class="text-center">
						<p class="text-4xl font-bold { healthScoreColor(data.Stats.HealthScore) } mb-2">
							{ fmt.Sprintf("%d%%", data.Stats.HealthScore) }
						</p>
						<p class="text-gray-600 dark:text-gray-400">Overall Health Score</p>
					</div>
				</div>
				<!-- Quick Actions -->
				<div class="card p-8">
					<h3 class="text-xl font-bold mb-6 text-gray-800 dark:text-gray-200 flex items-center gap-2">
						<i class="fas fa-bolt text-warning-500"></i>
						Quick Actions
					</h3>
					<div class="space-y-4">
						<button onclick="refreshAllDevices()" class="w-full btn btn-primary text-left">
							<i class="fas fa-sync-alt mr-3"></i>
							<div>
								<div class="font-semibold">Refresh All Devices</div>
								<div class="text-xs opacity-75">Update device status</div>
							</div>
						</button>
						<a href="/devices?status=offline" class="w-full btn btn-secondary block">
							<i class="fas fa-plug mr-3"></i>
							<div>
								<div class="font-semibold">View Offline Devices</div>
								<div class="text-xs opacity-75">Check disconnected devices</div>
							</div>
						</a>
						<a href="/faults?severity=critical" class="w-full btn btn-danger block">
							<i class="fas fa-exclamation-circle mr-3"></i>
							<div>
								<div class="font-semibold">View Critical Faults</div>
								<div class="text-xs opacity-75">Resolve urgent issues</div>
							</div>
						</a>
					</div>
				</div>
			</div>
			<!-- Charts Row -->
			<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
				<!-- Device Distribution by Vendor -->
				<div class="card p-6 hover:shadow-xl transition-all duration-300">
					<div class="flex items-center justify-between mb-6">
						<h3 class="text-lg font-bold text-gray-800 dark:text-gray-200 flex items-center gap-2">
							<i class="fas fa-chart-pie text-primary-500"></i>
							Devices by Vendor
						</h3>
						<button class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
							<i class="fas fa-expand-alt"></i>
						</button>
					</div>
					<div class="h-64 relative">
						<canvas id="vendorChart"></canvas>
					</div>
				</div>
				<!-- Fault Severity Distribution -->
				<div class="card p-6 hover:shadow-xl transition-all duration-300">
					<div class="flex items-center justify-between mb-6">
						<h3 class="text-lg font-bold text-gray-800 dark:text-gray-200 flex items-center gap-2">
							<i class="fas fa-chart-bar text-warning-500"></i>
							Faults by Severity
						</h3>
						<button class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
							<i class="fas fa-expand-alt"></i>
						</button>
					</div>
					<div class="h-64 relative">
						<canvas id="faultChart"></canvas>
					</div>
				</div>
			</div>
			<!-- Recent Activity -->
			<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
				<!-- Recent Faults -->
				<div class="card p-6">
					<div class="flex items-center justify-between mb-6">
						<h3 class="text-lg font-bold text-gray-800 dark:text-gray-200 flex items-center gap-2">
							<i class="fas fa-history text-danger-500"></i>
							Recent Faults
						</h3>
						<a href="/faults" class="text-sm text-primary-500 hover:text-primary-600 font-medium flex items-center gap-1">
							View All
							<i class="fas fa-arrow-right text-xs"></i>
						</a>
					</div>
					if len(data.RecentFaults) > 0 {
						<div class="space-y-3">
							for _, fault := range data.RecentFaults {
								@FaultItem(fault)
							}
						</div>
					} else {
						<div class="text-center py-12">
							<i class="fas fa-check-circle text-success-500 text-4xl mb-4"></i>
							<p class="text-gray-500 dark:text-gray-400 font-medium">No recent faults</p>
							<p class="text-sm text-gray-400 dark:text-gray-500">All systems running smoothly</p>
						</div>
					}
				</div>
				<!-- System Performance -->
				<div class="card p-6">
					<div class="flex items-center justify-between mb-6">
						<h3 class="text-lg font-bold text-gray-800 dark:text-gray-200 flex items-center gap-2">
							<i class="fas fa-tachometer-alt text-info-500"></i>
							System Performance
						</h3>
					</div>
					<div class="space-y-4">
						<div class="flex items-center justify-between">
							<span class="text-sm font-medium text-gray-600 dark:text-gray-400">CPU Usage</span>
							<span class="text-sm font-bold text-gray-800 dark:text-gray-200">12%</span>
						</div>
						<div class="progress-bar">
							<div class="progress-bar-fill" style="width: 12%"></div>
						</div>
						<div class="flex items-center justify-between">
							<span class="text-sm font-medium text-gray-600 dark:text-gray-400">Memory Usage</span>
							<span class="text-sm font-bold text-gray-800 dark:text-gray-200">34%</span>
						</div>
						<div class="progress-bar">
							<div class="progress-bar-fill" style="width: 34%"></div>
						</div>
						<div class="flex items-center justify-between">
							<span class="text-sm font-medium text-gray-600 dark:text-gray-400">Storage Usage</span>
							<span class="text-sm font-bold text-gray-800 dark:text-gray-200">67%</span>
						</div>
						<div class="progress-bar">
							<div class="progress-bar-fill" style="width: 67%"></div>
						</div>
					</div>
				</div>
			</div>
			<!-- Critical Alerts -->
			if len(data.CriticalFaults) > 0 {
				<div class="card p-6 border-2 border-danger-500 bg-danger-50 dark:bg-danger-900/20 animate-pulse">
					<div class="flex items-center mb-6">
						<div class="w-12 h-12 bg-danger-500 rounded-full flex items-center justify-center mr-4 animate-bounce">
							<i class="fas fa-exclamation-circle text-white text-xl"></i>
						</div>
						<div>
							<h3 class="text-lg font-bold text-danger-700 dark:text-danger-300">Critical Alerts</h3>
							<p class="text-sm text-danger-600 dark:text-danger-400">Immediate attention required</p>
						</div>
					</div>
					<div class="space-y-3">
						for _, fault := range data.CriticalFaults {
							@CriticalFaultAlert(fault)
						}
					</div>
				</div>
			}
		</div>
		<!-- Chart Scripts -->
		<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
		<script>
            // Prepare chart data
            const vendorLabels = [
                { for vendor, _ := range data.DevicesByVendor }'{ vendor }',{ end }
            ];
            const vendorCounts = [
                { for _, count := range data.DevicesByVendor }{ fmt.Sprintf("%d", count) },{ end }
            ];

            const faultCounts = {
                critical: { fmt.Sprintf("%d", data.FaultSeverity["critical"]) },
                major: { fmt.Sprintf("%d", data.FaultSeverity["major"]) },
                minor: { fmt.Sprintf("%d", data.FaultSeverity["minor"]) },
                warning: { fmt.Sprintf("%d", data.FaultSeverity["warning"]) },
                info: { fmt.Sprintf("%d", data.FaultSeverity["info"]) }
            };

            // Vendor Chart
            const vendorCtx = document.getElementById('vendorChart').getContext('2d');
            const vendorData = {
                labels: vendorLabels,
                datasets: [{
                    data: vendorCounts,
                    backgroundColor: [
                        '#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#ec4899'
                    ]
                }]
            };

            new Chart(vendorCtx, {
                type: 'doughnut',
                data: vendorData,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                color: document.documentElement.classList.contains('dark') ? '#e2e8f0' : '#374151'
                            }
                        }
                    }
                }
            });

            // Fault Chart
            const faultCtx = document.getElementById('faultChart').getContext('2d');
            const faultData = {
                labels: ['Critical', 'Major', 'Minor', 'Warning', 'Info'],
                datasets: [{
                    label: 'Faults',
                    data: [
                        faultCounts.critical,
                        faultCounts.major,
                        faultCounts.minor,
                        faultCounts.warning,
                        faultCounts.info
                    ],
                    backgroundColor: ['#ef4444', '#f97316', '#f59e0b', '#eab308', '#06b6d4'],
                    borderWidth: 0
                }]
            };

            new Chart(faultCtx, {
                type: 'bar',
                data: faultData,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                color: document.documentElement.classList.contains('dark') ? '#e2e8f0' : '#374151'
                            },
                            grid: {
                                color: document.documentElement.classList.contains('dark') ? '#334155' : '#e5e7eb'
                            }
                        },
                        x: {
                            ticks: {
                                color: document.documentElement.classList.contains('dark') ? '#e2e8f0' : '#374151'
                            },
                            grid: {
                                display: false
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            });

            // Update stats function for WebSocket updates
            function updateStats(data) {
                // Update stat cards
                const totalDevicesEl = document.querySelector('[data-stat="total-devices"]');
                const onlineDevicesEl = document.querySelector('[data-stat="online-devices"]');
                const activeFaultsEl = document.querySelector('[data-stat="active-faults"]');
                const criticalFaultsEl = document.querySelector('[data-stat="critical-faults"]');

                if (totalDevicesEl && data.devices) totalDevicesEl.textContent = data.devices.total || 0;
                if (onlineDevicesEl && data.devices) onlineDevicesEl.textContent = data.devices.online || 0;
                if (activeFaultsEl && data.faults) activeFaultsEl.textContent = data.faults.active || 0;
                if (criticalFaultsEl && data.faults) criticalFaultsEl.textContent = data.faults.critical || 0;

                // Update navigation badges
                const deviceCountEl = document.getElementById('device-count');
                const faultCountEl = document.getElementById('fault-count');

                if (deviceCountEl && data.devices) {
                    const totalDevices = data.devices.total || 0;
                    deviceCountEl.textContent = totalDevices;
                    if (totalDevices > 0) {
                        deviceCountEl.classList.remove('hidden');
                    }
                }

                if (faultCountEl && data.faults) {
                    const activeFaults = data.faults.active || 0;
                    faultCountEl.textContent = activeFaults;
                    if (activeFaults > 0) {
                        faultCountEl.classList.remove('hidden');
                    } else {
                        faultCountEl.classList.add('hidden');
                    }
                }
            }

            // Refresh all devices
            function refreshAllDevices() {
                if (confirm('Are you sure you want to refresh all devices? This may take some time.')) {
                    fetch('/api/devices/refresh-all', { method: 'POST' })
                        .then(res => res.json())
                        .then(data => {
                            alert(data.message || 'Refresh initiated');
                        })
                        .catch(err => {
                            alert('Failed to refresh devices');
                        });
                }
            }
        </script>
	}
}

templ StatCard(title string, value int, icon string, colorType string) {
	<div class="card p-6 hover:shadow-lg transition-all duration-300 group">
		<div class="flex items-center justify-between">
			<div class="flex-1">
				<p class="text-sm font-medium text-gray-600 dark:text-gray-400 mb-2">{ title }</p>
				<p class="text-3xl font-bold text-gray-800 dark:text-gray-200 group-hover:scale-105 transition-transform" data-stat={ toDataAttr(title) }>
					{ fmt.Sprintf("%d", value) }
				</p>
			</div>
			<div class={ "p-4 rounded-xl shadow-lg " + getStatCardBg(colorType) }>
				<i class={ "fas " + icon + " text-white text-2xl" }></i>
			</div>
		</div>
		<div class={ "mt-4 px-3 py-1 rounded-full text-xs font-semibold inline-block " + getStatCardTextBg(colorType) }>
			{ getStatCardLabel(colorType) }
		</div>
	</div>
}

templ ServiceStatus(name string, connected bool) {
	<div class="flex items-center justify-between">
		<span class="text-gray-700 dark:text-gray-700">{ name }</span>
		<span class="flex items-center">
			if connected {
				<i class="fas fa-check-circle text-success mr-2"></i>
				<span class="text-success">Connected</span>
			} else {
				<i class="fas fa-times-circle text-danger mr-2"></i>
				<span class="text-danger">Disconnected</span>
			}
		</span>
	</div>
}

templ FaultItem(fault *models.Fault) {
	<div class="flex items-start gap-4 p-4 rounded-xl border border-gray-100 dark:border-gray-700 hover:shadow-md hover:border-gray-200 dark:hover:border-gray-600 transition-all duration-300">
		<div class={ "w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0 " + getSeverityBg(fault.Severity) }>
			<i class={ "fas fa-exclamation-triangle text-white text-sm" }></i>
		</div>
		<div class="flex-1 min-w-0">
			<div class="flex items-center gap-2 mb-1">
				<p class="text-sm font-semibold text-gray-800 dark:text-gray-200 truncate">
					{ fault.DeviceSerial }
				</p>
				<span class={ "px-2 py-0.5 rounded-full text-xs font-medium " + getSeverityBadge(fault.Severity) }>
					{ fault.Severity }
				</span>
			</div>
			<p class="text-sm text-gray-600 dark:text-gray-400 mb-2 line-clamp-2">
				{ fault.Message }
			</p>
			<div class="flex items-center justify-between">
				<p class="text-xs text-gray-500 dark:text-gray-500 flex items-center gap-1">
					<i class="fas fa-clock"></i>
					{ timeAgo(fault.Timestamp) }
				</p>
				<button class="text-xs text-primary-500 hover:text-primary-600 font-medium">
					View Details
				</button>
			</div>
		</div>
	</div>
}

templ CriticalFaultAlert(fault *models.Fault) {
	<div class="bg-red-50 dark:bg-red-900 border border-red-200 dark:border-red-800 rounded-lg p-3">
		<div class="flex items-start">
			<i class="fas fa-exclamation-circle text-red-500 mt-0.5 mr-3"></i>
			<div class="flex-1">
				<p class="text-sm font-medium text-red-800 dark:text-red-200">
					{ fault.DeviceSerial } - { fault.Code }
				</p>
				<p class="text-sm text-red-700 dark:text-red-300 mt-1">
					{ fault.Message }
				</p>
				<div class="mt-2">
					<a href={ templ.URL(fmt.Sprintf("/faults/%s", fault.ID)) } class="text-xs text-red-600 dark:text-red-400 hover:underline">
						View Details →
					</a>
				</div>
			</div>
		</div>
	</div>
}

templ HealthGauge(score int) {
	<div class="relative w-32 h-32 mx-auto">
		<svg class="transform -rotate-90 w-32 h-32">
			<circle cx="64" cy="64" r="56" stroke="#e5e7eb" stroke-width="12" fill="none" class="dark:stroke-dark-border"></circle>
			<circle
				cx="64"
				cy="64"
				r="56"
				stroke={ healthScoreColor(score) }
				stroke-width="12"
				fill="none"
				stroke-dasharray={ fmt.Sprintf("%d 352", int(float64(score)*3.52)) }
				stroke-linecap="round"
			></circle>
		</svg>
	</div>
}

func healthScoreColor(score int) string {
	switch {
	case score >= 80:
		return "text-success"
	case score >= 60:
		return "text-warning"
	default:
		return "text-danger"
	}
}

func severityColor(severity string) string {
	switch severity {
	case "critical":
		return "text-red-500"
	case "major":
		return "text-orange-500"
	case "minor":
		return "text-yellow-500"
	case "warning":
		return "text-yellow-400"
	default:
		return "text-blue-400"
	}
}

func getStatCardBg(colorType string) string {
	switch colorType {
	case "primary":
		return "bg-gradient-to-br from-primary-500 to-primary-600"
	case "success":
		return "bg-gradient-to-br from-success-500 to-success-600"
	case "warning":
		return "bg-gradient-to-br from-warning-500 to-warning-600"
	case "danger":
		return "bg-gradient-to-br from-danger-500 to-danger-600"
	default:
		return "bg-gradient-to-br from-gray-500 to-gray-600"
	}
}

func getStatCardTextBg(colorType string) string {
	switch colorType {
	case "primary":
		return "bg-primary-100 text-primary-800"
	case "success":
		return "bg-success-100 text-success-800"
	case "warning":
		return "bg-warning-100 text-warning-800"
	case "danger":
		return "bg-danger-100 text-danger-800"
	default:
		return "bg-gray-100 text-gray-800"
	}
}

func getStatCardLabel(colorType string) string {
	switch colorType {
	case "primary":
		return "Total Count"
	case "success":
		return "Active"
	case "warning":
		return "Pending"
	case "danger":
		return "Critical"
	default:
		return "Status"
	}
}

func getSeverityBg(severity string) string {
	switch severity {
	case "critical":
		return "bg-danger-500"
	case "major":
		return "bg-orange-500"
	case "minor":
		return "bg-warning-500"
	case "warning":
		return "bg-yellow-500"
	default:
		return "bg-info-500"
	}
}

func getSeverityBadge(severity string) string {
	switch severity {
	case "critical":
		return "bg-danger-100 text-danger-800"
	case "major":
		return "bg-orange-100 text-orange-800"
	case "minor":
		return "bg-warning-100 text-warning-800"
	case "warning":
		return "bg-yellow-100 text-yellow-800"
	default:
		return "bg-info-100 text-info-800"
	}
}

func toDataAttr(title string) string {
	switch title {
	case "Total Devices":
		return "total-devices"
	case "Online Devices":
		return "online-devices"
	case "Active Faults":
		return "active-faults"
	case "Critical Faults":
		return "critical-faults"
	default:
		return ""
	}
}
